#pragma checksum "C:\Users\marcio\source\repos\BlazorApp\BlazorApp\Pages\Graficos.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f7819192434dda6d04199401893ca55679e84465"
// <auto-generated/>
#pragma warning disable 1591
namespace BlazorApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using BlazorApp;
    using BlazorApp.Shared;
    using BlazorComponents.ChartJS;
    using BlazorComponents.Shared;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/Graficos")]
    public class Graficos : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
            base.BuildRenderTree(builder);
            builder.AddMarkupContent(0, "<h1>Graficos Blazor</h1>\n\n");
            builder.OpenElement(1, "div");
            builder.AddAttribute(2, "class", "row");
            builder.AddContent(3, "\n    ");
            builder.OpenElement(4, "button");
            builder.AddAttribute(5, "class", "btn btn-primary");
            builder.AddAttribute(6, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(UpdateChart));
            builder.AddContent(7, "Update Chart ");
            builder.CloseElement();
            builder.AddContent(8, "\n");
            builder.CloseElement();
            builder.AddContent(9, "\n");
            builder.OpenComponent<BlazorComponents.Shared.ChartJsBarChart>(10);
            builder.AddAttribute(11, "Chart", Microsoft.AspNetCore.Blazor.Components.RuntimeHelpers.TypeCheck<BlazorComponents.ChartJS.ChartJSBarChart>(blazorBarChartJS));
            builder.AddAttribute(12, "Width", Microsoft.AspNetCore.Blazor.Components.RuntimeHelpers.TypeCheck<System.Int32>(600));
            builder.AddAttribute(13, "Height", Microsoft.AspNetCore.Blazor.Components.RuntimeHelpers.TypeCheck<System.Int32>(300));
            builder.AddComponentReferenceCapture(14, (__value) => {
#line 8 "C:\Users\marcio\source\repos\BlazorApp\BlazorApp\Pages\Graficos.cshtml"
                      barChartJs = (BlazorComponents.Shared.ChartJsBarChart)__value;

#line default
#line hidden
            }
            );
            builder.CloseComponent();
        }
        #pragma warning restore 1998
#line 10 "C:\Users\marcio\source\repos\BlazorApp\BlazorApp\Pages\Graficos.cshtml"
            

public ChartJSBarChart blazorBarChartJS { get; set; } = new ChartJSBarChart();
ChartJsBarChart barChartJs;

protected override void OnInit()
{

    blazorBarChartJS = new ChartJSBarChart()
    {
        ChartType = "bar",
        CanvasId = "myFirstBarChart",
        Options = new ChartJsOptions()
        {
            Text = "Sample chart from Blazor",
            BorderWidth = 1,
            Display = true,
            // Title of the chart
            Title = new ChartJsTitle()
            {
                Display = true, // Set to false for hiding the title
                Text = "Title",
                FontSize = 40
            },
            Layout = new ChartJsLayout()
            {
                // add some space to the chart for better rendering
                Padding = new ChartJsPadding()
                {
                    Bottom = 0,
                    Left = 0,
                    Right = 0,
                    Top = 50
                }
            },
            // move the legend
            Legend = new ChartJsLegend()
            {
                Position = "top",
                Display = true // set to false for hiding legend
            },
            Scales = new ChartJsScale()
            {
                XAxes = new List<ChartJsXAxes>()
{
new ChartJsXAxes()
{
    Ticks = new ChartJsTicks()
    {
        BeginAtZero = true,
        FontSize = 20
    },
    Position = "top"
}
},
                YAxes = new List<ChartJsYAxes>()
{
new ChartJsYAxes()
{
    Ticks = new ChartJsTicks()
    {
        BeginAtZero = true,
        FontSize = 20,
        Max = 50 // set a maxmimum value for this axis
    }
}
}
            },
            Plugins = new ChartJsPlugins()
            {
                // if you have enabled the plugin you can use these parameters, otherwise it will be ignored
                Datalabels = new ChartJsDataLabels()
                {
                    Align = "end",
                    Anchor = "end",
                    Color = "black",
                    Display = true,
                    Font = new ChartJsDataLabelsFont()
                    {
                        Size = 20
                    }
                }
            }
        },
        Data = new ChartJsBarData()
        {
            Labels = new List<string>() { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" },
            Datasets = new List<ChartJsBarDataset>()
{
new ChartJsBarDataset()
{
Label = "# of Votes from blazor",
BackgroundColor = new List<string>(){"#cc65fe" },
BorderColor = "#cc65fe",
PointHoverRadius = 2,
Data = new List<double>(){ 19.187,12.2253,5.5,3,3,2}
},
new ChartJsBarDataset()
{
Label = "# of Likes from blazor",
BackgroundColor = new List<string>() {
    "#a4cef0",
    "#3498db",
    "#95a5a6",
    "#9b59b6",
    "#f1c40f",
    "#e74c3c",
    "#34495e" },
BorderColor = "#36a2eb",
PointHoverRadius = 2,
Data = new List<int>(){ 30,10,15,13,13,12}.Select<int,double>(i=> i).ToList()
}
}
        }
    };
}

public async Task<bool> UpdateChart()
{
    //Update existing dataset
    blazorBarChartJS.Data.Labels.Add($"New{DateTime.Now.Second}");
    var firstDataSet = blazorBarChartJS.Data.Datasets[0];
    firstDataSet.Data.Add(DateTime.Now.Second);

    //Add new dataset
    //blazorLineChartJS.Data.Datasets.Add(new ChartJsLineDataset()
    //{
    //    BackgroundColor = "#cc65fe",
    //    BorderColor = "#cc65fe",
    //    Label = "# of Votes from blazor 1",
    //    Data = new List<int> {20,21,12,3,4,4},
    //    Fill = true,
    //    BorderWidth = 2,
    //    PointRadius = 3,
    //    PointBorderWidth = 1
    //});

    return true;
}

#line default
#line hidden
    }
}
#pragma warning restore 1591
