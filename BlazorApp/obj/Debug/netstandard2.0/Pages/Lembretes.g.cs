#pragma checksum "C:\Users\Marcio\Desktop\blazor-teste\BlazorApp\BlazorApp\Pages\Lembretes.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1433a75766b792823c3bb3ac8215a4217e530981"
// <auto-generated/>
#pragma warning disable 1591
namespace BlazorApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using BlazorApp;
    using BlazorApp.Shared;
    using System.Threading;
    using BlazorComponents.ChartJS;
    using BlazorComponents.Shared;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/Lembretes")]
    public class Lembretes : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
            base.BuildRenderTree(builder);
            builder.AddMarkupContent(0, "<h1>Lembretes</h1>\n");
            builder.AddMarkupContent(1, "<label for=\"start\">Nome do lembrete:</label>\n");
            builder.OpenElement(2, "input");
            builder.AddAttribute(3, "id", "idnomelembrete");
            builder.AddAttribute(4, "type", "text");
            builder.AddAttribute(5, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(Nome));
            builder.AddAttribute(6, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => Nome = __value, Nome));
            builder.CloseElement();
            builder.AddContent(7, "\n\n");
            builder.AddMarkupContent(8, "<label for=\"start\">Selecione a data:</label>\n\n\n");
            builder.OpenElement(9, "input");
            builder.AddAttribute(10, "type", "text");
            builder.AddAttribute(11, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(data, "dd.MM.yyyy"));
            builder.AddAttribute(12, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => data = __value, data, "dd.MM.yyyy"));
            builder.CloseElement();
            builder.AddContent(13, "\n");
            builder.AddMarkupContent(14, "<span class=\"note\">Formato: dd/mm/aaaa HH:MM:SS </span>\n\n");
            builder.OpenElement(15, "button");
            builder.AddAttribute(16, "class", "btn btn-primary");
            builder.AddAttribute(17, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(Salvar));
            builder.AddContent(18, "Salvar");
            builder.CloseElement();
            builder.AddContent(19, "\n\n");
            builder.OpenElement(20, "table");
            builder.AddAttribute(21, "class", "table");
            builder.AddContent(22, "\n    ");
            builder.AddMarkupContent(23, "<thead>\n        <tr>\n            <th>Nome</th>\n            <th>Data</th>\n        </tr>\n    </thead>\n    ");
            builder.OpenElement(24, "tbody");
            builder.AddContent(25, "\n");
#line 32 "C:\Users\Marcio\Desktop\blazor-teste\BlazorApp\BlazorApp\Pages\Lembretes.cshtml"
         foreach (var lembrete in listaLembrete)
        {


#line default
#line hidden
            builder.AddContent(26, "            ");
            builder.OpenElement(27, "tr");
            builder.AddContent(28, "\n                ");
            builder.OpenElement(29, "td");
            builder.AddContent(30, lembrete.nome);
            builder.CloseElement();
            builder.AddContent(31, "\n                ");
            builder.OpenElement(32, "td");
            builder.AddContent(33, lembrete.datas);
            builder.CloseElement();
            builder.AddContent(34, "\n            ");
            builder.CloseElement();
            builder.AddContent(35, "\n");
#line 39 "C:\Users\Marcio\Desktop\blazor-teste\BlazorApp\BlazorApp\Pages\Lembretes.cshtml"
        }

#line default
#line hidden
            builder.AddContent(36, "    ");
            builder.CloseElement();
            builder.AddContent(37, "\n");
            builder.CloseElement();
            builder.AddContent(38, "\n");
            builder.OpenElement(39, "h1");
            builder.AddContent(40, notification);
            builder.CloseElement();
        }
        #pragma warning restore 1998
#line 45 "C:\Users\Marcio\Desktop\blazor-teste\BlazorApp\BlazorApp\Pages\Lembretes.cshtml"
 
        public string Nome { get; set; }
        public DateTime data { get; set; }
        public DateTime dating = DateTime.Now;
        List<lembrete> listaLembrete = new List<lembrete>();
        public string notification { get; set; }


        void Salvar()
        {
            lembrete novoLembrete = new lembrete();
            novoLembrete.nome = Nome;
            novoLembrete.datas = data;
            listaLembrete.Add(novoLembrete);
            List<MyEvent> _myEvents;
            _myEvents = new List<MyEvent>()
{
    new MyEvent("My event A", DateTime.Now.AddSeconds(5)),
    new MyEvent("My event B", DateTime.Now.AddSeconds(10)),
    new MyEvent("My event C", DateTime.Now.AddSeconds(20))
};

            Task.Factory.StartNew(() =>
            {
                while (true)
                {
                    // Report events' status
                    DateTime now = DateTime.Now;

                    foreach (var myEvent in _myEvents.Where(e => e.Time <= now))
                        System.Diagnostics.Debug.WriteLine(string.Format("Event '{0}' already held", myEvent.Name));

                    foreach (var myEvent in _myEvents.Where(e => e.Time > now))
                    {
                        string notification = "Event '{0}' at '{1}' starting in {2} seconds";
                        TimeSpan timeSpan = myEvent.Time - now;
                        notification = string.Format(notification, myEvent.Name, myEvent.Time, (int)timeSpan.TotalSeconds);
                        
                    }
                   
                
                // Wait for a while before next iteration
                Thread.Sleep(8000);
                }
            });
    }

    class lembrete
    {
        public string nome { get; set; }
        public DateTime datas { get; set; }

    }

    class MyEvent
    {
        public MyEvent()
        { }

        public MyEvent(string name, DateTime time)
        {
            Name = name;
            Time = time;
        }

        public string Name { get; set; }

        public DateTime Time { get; set; }
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
